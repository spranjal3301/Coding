! Open API Spec (OAS) 
* When you create backend, it’s very hard for other people to know the exact shape of your routes
* Open API Spec is a standard way to describe your API

* When properly defined via OpenAPI, a consumer can understand and interact with the remote service with minimal implementation logic.
- Using Open API Spec, you can create SDK(Auto generate Clients) for your API

` Auto generate OpenAPI Spec file From your code:
* 1. Use Language that have strict type system (Rust)
* 2. Use Hono + zod with OpenAPI API client
* 3. Use TypeScript Decorators
* 4. swagger-jsdoc library
* 5. Use JSDoc comments
* 6. TSOA


` Swagger UI:
* Open AI Spec to UI converter
* Swagger UI is a tool that allows you to visualize and interact with your API’s resources without having any of the implementation logic in place.
* It’s a great way to document your API and make it easier for developers to understand how to use it.

npm install swagger-ui-express
npm install swagger-jsdoc


`openapi-typescript-codegen
- genrate SDK from OpenAPI Spec
* OpenAPI TypeScript Codegen is a tool that generates TypeScript clients from OpenAPI specifications.
* It allows you to generate a TypeScript client that can be used to interact with your API.

npm install openapi-typescript-codegen
npx openapi-typescript-codegen --input ./spec.json --output ./generated



` Demo backend:

import express from 'express';

const app = express();
const port = 3000;

app.use(express.json());

let users = [
    { id: 1, name: 'John Doe' },
    { id: 2, name: 'Jane Doe' }
];

app.get('/users', (req, res) => {
    const { name } = req.query;

    if (name) {
        const filteredUsers = users.filter(user => user.name.toLowerCase().includes(name.toLowerCase()));
        res.json(filteredUsers);
    } else {
        res.json(users);
    }
});

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});








` Spec File:
openapi: 3.0.0
info:
  title: User API
  description: API to manage users
  version: "1.0.0"
servers:
  - url: http://localhost:3000
paths:
  /users:
    get:
      summary: Get a list of users
      description: Retrieves a list of users, optionally filtered by name.
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Name filter for user lookup.
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier of the user.
        name:
          type: string
          description: The name of the user.
      required:
        - id
        - name 










