z
z
predict_reg<- ifelse(predicted_val>05, print("Versicolor"),print("Setosa"))
predict_reg <- ifelse(predicted_val > 0.5 ,2,1)
table(as.numeric(ir_test$Species), predict_reg)
print("hello R")
x=5
print(x)
x
z->7
print("hello R")
x=5
print(x)
x
z<-7
z
7-> y
y
assign("z",8)
z
x
x
x
y
x=c(1,2,5)
x
var1=c(TRUE,8)
var1
ls()
rm(x)
ls()
rm(x)
ls()
rm(x)
x=5
a="pranjal"
a
nchar(a)
#readline for input
var1=readline()
TDM assignment
#readline for input
var1=readline()
TDM
#readline for input
var1=readline()
var1
class(var1)
var2=as.integer(var1)
#readline for input
var1=readline()
var1
class(var1)
var2=as.integer(var1)
var2
{
num1=as.integer(readline("enter num1"))
num2=as.integer(readline("enter num2"))
print(num1+num2)
}
num2=as.integer(readline("enter num2: "))
print(num1+num2)
}
{
num1=as.integer(readline("enter num1: "))
num2=as.integer(readline("enter num2: "))
print(num1+num2)
}
b=scan()
b=scan()
b=scan()
v4=charToRaw("hello jisna")
v4
class(v4)
v5=as.Date("1233-12-23")
v5
class(v5)
#assign integer
x=as.integer(5)
class(x)
y=27L
class(y)
catagory <- "c"
price
for (i in 1:20){
print (i^2)
}
# EX 1 : Prog to print Square of Numbers from 1 to 20
for (i in 1:20){
print (i^2)
}
# EX 3: Program to display months of an year( Hint : use c() then traverse through month in each year)
a<-c(1:12)
month.name[a]
#vector is homogenies d.s
v1=c(1,2,3,4)
v1*2
v1^2
v2=c(4,3,2,1)
v1+v2
length(v1)
v3=c("red","seagreen","grey","yellow")
v3[c(1,2,3)]
v3[c(-1,-2)]
v4=1:8
v4
v5=seq(1,9,by=2)
v5
v6=letters[1:10]
v6
v7=c(2.4,45,134524,46,-12,-46)
sort(v7)
#if any element is less than 5
any(v1<5)
#if all element is less than 5
all(v1<5)
#Lists in R
l1=list("here","we","go","again","27")
l1
class(l1)
unlist(l1)
l1[3]
l1[1:3]
#name is fn
names(l1)=c("a","b","c","d","e")
l1[["a"]]
l2=list(a=1:27,b=letters[1:5],c=27)
l2$a
l2[1]=NULL
merged=c(l1,l2)
merged
#Matrixes
m1=matrix(c(26:50),nrow=5,byrow = TRUE)
m1
m1[1,2]
dim(m1)
rn=c(1,2,3,4,5)
cn=c("a","b","c","d","e")
m2=matrix(c(1:25),nrow=5,byrow = TRUE,dimnames = list(rn,cn))
m2
length(m1)
length(m2)
m1*m2
m1%*%m2 #This operator is used to multiply a matrix with its transpose.
#array
a1=array(c("red","seagreen"),dim=c(3,3,2))
a1
a1[1,2,2]
print(a1[,3,2])
a1[,,2]
#Factors
f=c("m","f","c","o","m","f","c","o","m","f","c","o")
f
factor.f=factor(f)
factor.f
nlevels(factor.f)
BMI <- data.frame(
gender = c("Male","Female","Male"),
height = c(145,136,157),
weight = c(56,67,89),
age = c(23,19,21)
)
BMI <- data.frame(
gender = c("Male","Female","Male"),
height = c(145,136,157),
weight = c(56,67,89),
age = c(23,19,21)
)
BMI <- data.frame(
gender = c("Male","Female","Male"),
height = c(145,136,157),
weight = c(56,67,89),
age = c(23,19,21)
)
print(BMI)
X = BMI
nrow(X)
ncol(X)
dim(X)
names(X)
head(X)
tail(X)
# selecting specific elements
X[2,3]  # second row third col
X[2] # second col gives priority if not in cordinated stuructured form
X[,2] # will not show row only col
X[2,] # will only show row
print(X[,c(2,3)])  # show second and third col
print(X[, -c(2,3)])  # show all the colummns except the ones removed in this case 2 and 3
# creating a data frame
emp.data <- data.frame(
empid = c(1:4),
emp_name = c("Sam", "Rob",
"Max", "John"
),
emp_dept = c("Sales", "RobMarketing",
"HR", "R&D")
)
emp.newdata <- data.frame(
empid = c(1:4),
emp_name = c("Sam", "Rob",
"Max", "John"
),
emp_dept = c("Sales", "RobMarketing",
"HR", "R&D")
)
# rbind is for row binding only
emp.finaldata <- rbind(emp.data,emp.newdata)
print(emp.finaldata)
emp.data$salary <- c(20000,30000,23000,65000)
print(emp.data)
# creating a data frame
emp.newdata <- data.frame(
empid = c(1:4),
emp_location = c("Delhi", "Gurgaon",
"Mumbai", "Guwahati"
),
emp_jobtype = c("Remote", "on-site",
"Remote", "Remote")
)
#print the duplicated
dup_df<-duplicated(data1)
dup_df
dup_rows<-data1[dup_df,]
print(dup_rows)
#remove the duplicate row
NO_dup_rows<-data1(!dup_df,)
view(NO_dup_rows)
class(data1$species)#check the class of columns
table(NO_dup_rows$species)
# rbind is for row binding only
emp.finaldata <- rbind(emp.data,emp.newdata)
print(emp.finaldata)
emp.finaldata <- rbind(emp.data,emp.newdata)
print(emp.finaldata)
emp.data$salary <- c(20000,30000,23000,65000)
print(emp.data)
emp.data$salary <- c(27,12,22,4)
print(emp.data)
# creating a data frame
emp.newdata <- data.frame(
empid = c(1:4),
emp_location = c("Delhi", "Gurgaon",
"Mumbai", "Guwahati"
),
emp_jobtype = c("Remote", "on-site",
"Remote", "Remote")
)
#print the duplicated
dup_df<-duplicated(data1)
dup_df
dup_rows<-data1[dup_df,]
print(dup_rows)
#remove the duplicate row
NO_dup_rows<-data1(!dup_df,)
view(NO_dup_rows)
table(NO_dup_rows$species)
class(data1$species)#check the class of columns
#print the duplicated
dup_df<-duplicated(data1)
dup_df
dup_rows<-data1[dup_df,]
print(dup_rows)
#remove the duplicate row
NO_dup_rows<-data1(!dup_df,)
view(NO_dup_rows)
class(data1$species)#check the class of columns
table(NO_dup_rows$species)
#print the duplicated
dup_df<-duplicated(data1)
#print the duplicated
dup_df<-duplicated(emp.newdata)
dup_df
dup_rows<-data1[dup_df,]
dup_rows<-emp.newdata[dup_df,]
print(dup_rows)
#remove the duplicate row
NO_dup_rows<-data1(!dup_df,)
view(NO_dup_rows)
class(emp.newdata$species)#check the class of columns
table(NO_dup_rows$species)
table(NO_dup_rows$Species)
#remove the duplicate row
NO_dup_rows<-emp.newdata(!dup_df,)
view(NO_dup_rows)
class(emp.newdata$species)#check the class of columns
table(NO_dup_rows$Species)
#print the duplicated
dup_df<-duplicated(emp.newdata)
dup_df
dup_rows<-emp.newdata[dup_df,]
print(dup_rows)
#remove the duplicate row
NO_dup_rows<-emp.newdata(!dup_df,)
#remove the duplicate row
NO_dup_rows<-emp.newdata(!dup_df)
view(NO_dup_rows)
x=read.csv("C:/Users/PRANJAL SINGH/Downloads/digit-recognizer/train.csv")
dim(x)
head(x)[1:5]
tail(x)[1:5]
x[5,]
x[2,1:9]
x=[,c(3,4)]
x=[c(3,4)]
x=c(3,4)
s1=matrix(as.numeric(x[2,-1]),nrow = 28, byrow = TRUE)
s1=matrix(as.numeric(x[2,-1]),nrow = 28, byrow = TRUE)
image(s1,col=grey.colors(255))
install.packages("OpenImageR")
library(OpenImageR)
s2=rotateFixed(s1,90)
s1=matrix(as.numeric(x[2,-1]),nrow = 28, byrow = TRUE)
x=read.csv("C:/Users/PRANJAL SINGH/Downloads/digit-recognizer/train.csv")
dim(x)
head(x)[1:5]
tail(x)[1:5]
x[5,]
x[2,1:9]
x[,c(3,4)]
s1=matrix(as.numeric(x[2,-1]),nrow = 28, byrow = TRUE)
image(s1,col=grey.colors(255))
install.packages("OpenImageR")
install.packages("OpenImageR")
library(OpenImageR)
s2=rotateFixed(s1,90)
x=read.csv("C:/Users/PRANJAL SINGH/Downloads/digit-recognizer/train.csv")
dim(x)
head(x)[1:5]
tail(x)[1:5]
x[5,]
x[2,1:9]
x[,c(3,4)]
x[5,27]
x[2,1:9]
x[,c(3,4)]
x[27,c(3,4)]
s1=matrix(as.numeric(x[2,-1]),nrow = 28, byrow = TRUE)
image(s1,col=grey.colors(255))
library(OpenImageR)
s2=rotateFixed(s1,90)
x=read.csv("C:/Users/PRANJAL SINGH/Downloads/digit-recognizer/train.csv")
dim(x)
head(x)[1:5]
tail(x)[1:5]
x[5,]
x[2,1:9]
x[,c(3,4)]
s1=matrix(as.numeric(x[2,-1]),nrow = 28, byrow = TRUE)
image(s1,col=grey.colors(255))
library(OpenImageR)
s2=rotateFixed(s1,90)
v1<-c(1,9.3,4.5,9.5,2)
v1<-c(1,9.3,4.5,9.5,2)
plot(v1)
v2=sep(33,20,by=-3)
v1<-c(1,9.3,4.5,9.5,2)
plot(v1)
v2=sep(33,20,by=-3)
length(v2)
plot(v1,v2)
v2=sep(33,20,by=-3)
v2=sep(33,20,by=-3)
v2=rep(33,20,by=-3)
length(v2)
plot(v1,v2)
length((v1))
length(v2)
v2=rep(1,10,by=2)
length(v2)
length((v1))
v2=rep(1,10,by=3)
length(v2)
v2=rep(1,5,by=2)
length(v2)
length((v1))
plot(v1,v2)
plot(v1,v2,type="l")
v1
print(order(v1))#return index of sorted
print(order(v1,decreasing = FALSE))
plot(v1[order(v1)],v2[order(v1)],type = "l",col="red")
#histogram plotting
v3=c(1,1,2,3,3,4,5,6,7,8,9)
hist(v3,
main="temperture of newyok",
xlab="temerature",
col="red",
border="black")
#box plot
bplo=c(12,23,34,45,56,67,78,89)
boxplot(bplo)
#iris is in bulid data set
df1=iris[,1:5]
plot(df1)
boxplot(df1)
pairs(df1)
stars(df1)
pairs(df1)
stars(df1)
PL=df1$Petal.Length
barplot(PL,xlab="All",ylab="Petal length",main="Petal lenth box plot ")
hist(iris$Petal.Length)
hist(iris$Petal.Length,col = "steelblue", main="Petal lenth histogram",xlab="length",ylab = "frequency")
plot(iris$Petal.Length,iris$Sepal.Width)
df1=iris[,1:4]
plot(df1)
PL=iris$Petal.Length
PW=iris$Petal.Width
plot(PL,PW)
plot(PL,PW,pch=2,type = "p",col="green")
#convert species to factors
class(iris$Species)
#if you read.csv() to read csv file all character coloums() into factors
speciesID=as.numeric(iris$Species)
plot(PL,PW,pch=speciesID,col=speciesID)
abline(lm(PW~PL))#for get line
print(mean(iris$Sepal.Length))
print(median(iris$Sepal.Length))
mode=mfv(iris$Sepal.Length)
mode=mfv(iris$Sepal.Length)
mode=mfv1(iris$Sepal.Length)
print(mean(iris$Sepal.Length))
print(median(iris$Sepal.Length))
mode=mfv(iris$Sepal.Length)
print(mode)
print(var(iris$Sepal.Length))
print(sd(iris$Sepal.Length))
summary(iris)
aggregate(spe)
aggregate(rpe)
View (iris)
library(modeest)
names(iris)
df1<-iris[,1:3]
plot(df1)
pl<-iris$Petal.Length
pw<-iris$Petal.Width
#statistics in R
#1.standard deviation,2.normal distribution,3.variance,4.mean
#normal distribution can be described in 2 parameters:mean,standard deviation
#measures of central tendency:mean,median,mode
#measures of dispersion:range,variance,standard dev
print(mean(iris$Sepal.Length))
print(median(iris$Sepal.Length))
library(modeest)
mode=mfv(iris$Sepal.Length)
print(mode)
print(var(iris$Sepal.Length))
print(sd(iris$Sepal.Length))
summary(iris)
aggregate(Sepal.Length~Species,iris,mean)
cor(iris[,1:4])#correlation matrix
plot(iris[,1:4])
#plot correlated features
y <- iris[,"Petal.Width"]
x <- iris[,"Petal.Length"]
head(x)
head(y)
xycorr <-cor(y,x,method = "pearson") # to find the corelation
xycorr
species_col = as.numeric(iris$Species)
plot(y~x,col = x)
modal1 <- lm(y~x)#to find slope and intercept
modal1 #provides regression line coefficient only
plot(y~x,col = species_col)
abline(modal1,col = "red",lwd = 3)# to draw the line
p1 <- predict(modal1, data.frame("x" = 5))
p1
irdata = iris
str(irdata)
levels(irdata$Species)
sum(is.na(irdata))
irdata <- irdata[1:100,]#taking inly two species setosha
samp <- sample(1:100,80)
irtrain <- irdata[samp,]
str(irtrain)
irtest <- irdata[-samp,]
str(irtest)
y <- irtrain$Species
x <- irtrain$Sepal.Width
glfit <- glm(y~x,family ="binomial")
summary(glfit)
newdata=data.frame(x=2.0)
predicted_val=predict(glfit,newdata,type="response")
predicted_val
newdata<-data.frame(x=ir_test$Sepal.Width)
predicted_val<-predict(glfit,newdata,type="response")
predicted_val
predict_reg<- ifelse(predicted_val>05, print("Versicolor"),print("Setosa"))
predict_reg <- ifelse(predicted_val > 0.5 ,2,1)
table(as.numeric(ir_test$Species), predict_reg)
predict_reg
prediction<-data.frame()
#classification
ir_data-iris str(ir_data)
levels (ir_data$species)
sum(is.na(ir_data))
ir_data<-ir_data[1:100,]#taking only two species
#set.seed(100) 30 str(ir_data)
samp<-sample(1:100,80)
ir_train<-ir_data[samp.] str(ir_train)
ir_test<-ir_data[-samp.]
str(ir_test)
y<-ir_train$Species #label 38 x<-ir_train$sepal.width input or independent variable
plot(x,y)
glfit<-glm(y-x, family-"binomial") #fits a generalized linear
model (gl)
summary(glfit)
#do prediction on testing set newdata-data. frame (x-2.0)
predicted_val<-predict (glfit, newdata, type="response")
predicted_val
